

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://ruach.github.io/</id>
  <title>Ruach</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-02-19T14:09:05-05:00</updated>
  <author>
    <name>Jaehyuk Lee</name>
    <uri>https://ruach.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://ruach.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://ruach.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> Â© 2024 Jaehyuk Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>TDX Specification Introduction</title>
    <link href="https://ruach.github.io/posts/tdx-intro/" rel="alternate" type="text/html" title="TDX Specification Introduction" />
    <published>2023-06-15T00:00:00-04:00</published>
  
    <updated>2023-06-15T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/tdx-intro/</id>
    <content src="https://ruach.github.io/posts/tdx-intro/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
  

  
    <summary>
      





      This slide provides an overview of Intel TDX, which I presented to my colleagues. 
It delves into the general architecture of Intel TDX and highlights its capability 
to ensure confidentiality and integrity for confidential virtual machines.




  This is an embedded Microsoft Office presentation, powered by Office.



    </summary>
  

  </entry>

  
  <entry>
    <title>TD VM Life Cycle Part 1</title>
    <link href="https://ruach.github.io/posts/TD-VM-LIFECYCLE-3/" rel="alternate" type="text/html" title="TD VM Life Cycle Part 1" />
    <published>2023-04-05T00:00:00-04:00</published>
  
    <updated>2023-04-05T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/TD-VM-LIFECYCLE-3/</id>
    <content src="https://ruach.github.io/posts/TD-VM-LIFECYCLE-3/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
  

  
    <summary>
      





      TD Boot Memory Setup (TDH.MEM.SEPT.ADD-TDH.MR.EXTEND)
In the previous postings, we built the meta data required for launching TD VM 
such as TDR, TDCS and VMCS of VCPU. However, to actually run code inside the TD,
we need memory pages and its mappings. We will see how TDX Module builds up the 
Secure EPT for private memories and add initial set of TD private pages using 
TDH.MEM.SEPT.ADD and TD...
    </summary>
  

  </entry>

  
  <entry>
    <title>TD VM Life Cycle Part 2</title>
    <link href="https://ruach.github.io/posts/TD-VM-LIFECYCLE-2/" rel="alternate" type="text/html" title="TD VM Life Cycle Part 2" />
    <published>2023-04-03T00:00:00-04:00</published>
  
    <updated>2023-04-03T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/TD-VM-LIFECYCLE-2/</id>
    <content src="https://ruach.github.io/posts/TD-VM-LIFECYCLE-2/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
  

  
    <summary>
      





      Deep dive into TD VCPU creation (TDH_VP_CREATE-TDH_VP_INIT)
Instantiating TD VCPU
After the VM has been initialized, note that it has not been finalized yet, it 
can generate VCPUs assigned to the generated TD instance. The logistics of TD 
VCPU generation consists of two parts mainly: generate VCPU (KVM_CREATE_VCPU) 
and initialize the generated VCPU as TDX VCPU (KVM_TDX_INIT_VCPU) through 
th...
    </summary>
  

  </entry>

  
  <entry>
    <title>TD VM Life Cycle Part 1</title>
    <link href="https://ruach.github.io/posts/TD-VM-LIFECYCLE-1/" rel="alternate" type="text/html" title="TD VM Life Cycle Part 1" />
    <published>2023-04-01T00:00:00-04:00</published>
  
    <updated>2023-04-01T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/TD-VM-LIFECYCLE-1/</id>
    <content src="https://ruach.github.io/posts/TD-VM-LIFECYCLE-1/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
  

  
    <summary>
      





      Deep dive into TD-VM creation (TDH_MNG_CREATE SEAMCALL-TDH_MNG_INIT)


This article will follow the steps described in this figure. It is good to check
this figure when you want to check which part of the TD VM creation you are
dealing with. Before we delve into the details, lets first check new data 
structures required to generate and initialize the TD VM: TDR, TDCS.

Trust Domain Root (TDR)
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Gem5 Interrupt Handling O3</title>
    <link href="https://ruach.github.io/posts/gem5-interrupt-handling-o3/" rel="alternate" type="text/html" title="Gem5 Interrupt Handling O3" />
    <published>2021-12-25T00:00:00-05:00</published>
  
    <updated>2021-12-25T00:00:00-05:00</updated>
  
    <id>https://ruach.github.io/posts/gem5-interrupt-handling-o3/</id>
    <content src="https://ruach.github.io/posts/gem5-interrupt-handling-o3/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
  

  
    <summary>
      





      
Interrupt makes the commit stage stop further instructions fetching
 813 template &amp;lt;class Impl&amp;gt;
 814 void
 815 DefaultCommit&amp;lt;Impl&amp;gt;::commit()
 816 {
 817     if (FullSystem) {
 818         // Check if we have a interrupt and get read to handle it
 819         if (cpu-&amp;gt;checkInterrupts(cpu-&amp;gt;tcBase(0)))
 820             propagateInterrupt();
 821     }


 788 template &amp;lt;class Im...
    </summary>
  

  </entry>

</feed>


