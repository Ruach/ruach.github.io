

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://ruach.github.io/</id>
  <title>Ruach</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-02-27T11:22:30-05:00</updated>
  <author>
    <name>Jaehyuk Lee</name>
    <uri>https://ruach.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://ruach.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://ruach.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Jaehyuk Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>TDX Architecture Introduction</title>
    <link href="https://ruach.github.io/posts/tdx-intro/" rel="alternate" type="text/html" title="TDX Architecture Introduction" />
    <published>2023-06-15T00:00:00-04:00</published>
  
    <updated>2023-06-15T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/tdx-intro/</id>
    <content src="https://ruach.github.io/posts/tdx-intro/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
  

  
    <summary>
      





      This slide provides an overview of Intel TDX, which I presented to my colleagues. 
It delves into the general architecture of Intel TDX and highlights its capability 
to ensure confidentiality and integrity for confidential virtual machines.




  This is an embedded Microsoft Office presentation, powered by Office.



    </summary>
  

  </entry>

  
  <entry>
    <title>KVM page-fault handling for TDX</title>
    <link href="https://ruach.github.io/posts/PAGEFAULT-HANDLING-KVM-TDX/" rel="alternate" type="text/html" title="KVM page-fault handling for TDX" />
    <published>2023-04-15T00:00:00-04:00</published>
  
    <updated>2023-04-15T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/PAGEFAULT-HANDLING-KVM-TDX/</id>
    <content src="https://ruach.github.io/posts/PAGEFAULT-HANDLING-KVM-TDX/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
    <category term="KVM" />
    
  

  
    <summary>
      





      Basic idea to implement private page

  Because shared EPT is the same as the existing EPT, use the existing logic for
shared EPT.  On the other hand, secure EPT requires additional operations
instead of directly reading/writing of the EPT entry.

  On EPT violation, The KVM mmu walks down the EPT tree from the root, determines
the EPT entry to operate, and updates the entry. If necessary, a TL...
    </summary>
  

  </entry>

  
  <entry>
    <title>KVM page-fault handling</title>
    <link href="https://ruach.github.io/posts/PAGEFAULT-HANDLING-KVM/" rel="alternate" type="text/html" title="KVM page-fault handling" />
    <published>2023-04-12T00:00:00-04:00</published>
  
    <updated>2023-04-12T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/PAGEFAULT-HANDLING-KVM/</id>
    <content src="https://ruach.github.io/posts/PAGEFAULT-HANDLING-KVM/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="KVM" />
    
  

  
    <summary>
      





      EPT violation exit and handle
The logistics of KVM’s page fault handling is like below: 
__vmx_handle_exit -&amp;gt; handle_ept_violation -&amp;gt; __vmx_handle_ept_violation -&amp;gt;
kvm_mmu_page_fault -&amp;gt; kvm_mmu_do_page_fault -&amp;gt; mmu.page_fault(), 
kvm_tdp_page_fault (when tdp is enabled) -&amp;gt; direct_page_fault

EPT violation exit reason interpretation
static inline int __vmx_handle_ept_violation(...
    </summary>
  

  </entry>

  
  <entry>
    <title>QEMU Side Memory Management for VM with RAMBLOCK</title>
    <link href="https://ruach.github.io/posts/QEMU-KVM-ADDRESS-SPACE/" rel="alternate" type="text/html" title="QEMU Side Memory Management for VM with RAMBLOCK" />
    <published>2023-04-11T00:00:00-04:00</published>
  
    <updated>2023-04-11T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/QEMU-KVM-ADDRESS-SPACE/</id>
    <content src="https://ruach.github.io/posts/QEMU-KVM-ADDRESS-SPACE/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="KVM" />
    
    <category term="QEMU" />
    
    <category term="Intel TDX" />
    
  

  
    <summary>
      





      QEMU side memory management

  The MemoryRegion is the link between guest physical address space and the 
RAMBlocks containing the memory. Each MemoryRegion has the ram_addr_t offset 
of the RAMBlock and each RAMBlock has a MemoryRegion pointer.
Note that MemoryRegion is more general than just RAM. It can also represent I/O
memory where read/write callback functions are invoked on access. This ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Shadow Page Table (SPT) and MEMSLOT</title>
    <link href="https://ruach.github.io/posts/SPT-AND-MEMSLOT/" rel="alternate" type="text/html" title="Shadow Page Table (SPT) and MEMSLOT" />
    <published>2023-04-10T00:00:00-04:00</published>
  
    <updated>2023-04-10T00:00:00-04:00</updated>
  
    <id>https://ruach.github.io/posts/SPT-AND-MEMSLOT/</id>
    <content src="https://ruach.github.io/posts/SPT-AND-MEMSLOT/" />
    <author>
      <name>Jaehyuk Lee</name>
    </author>

  
    
    <category term="Confidential Computing" />
    
    <category term="Intel TDX" />
    
    <category term="KVM" />
    
    <category term="QEMU" />
    
  

  
    <summary>
      





      Shadow Page Table (SPT)
Before the introduction of TDP, shadow paging has been utilized to translate
GPA to HPA. The KVM module utilize a unified concept to abstract the 
structure managing this translation (GPA-&amp;gt;HPA), called Shadow Page Table (SPT). 
Although it reminds of shadow paging, the emulated page table based 
translation before the invention TDP, now it represents the table handlin...
    </summary>
  

  </entry>

</feed>


