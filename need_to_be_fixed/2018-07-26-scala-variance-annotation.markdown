---
layout: post
title:  "Variance Annotation for Type Parameters "
categories: scala
---

by default, type parameter in the scala is non-variant which means, 
the subclass relationship does not applied in the classes 
generated by the class having type parameters such as __class NonVariant[T]__.

In other words, even though Int class is a sub-class of AnyRef class, 
NonVariant[Int] cannot be referenced by the variable typed 
NonVariant[AnyRef].

To allow the subclass relationship among the classes generated by the 
class having type parameters, special annotation is required.
There are two annotations for the variance of type parameters: __+ and -__.

+ annotation is called covariant annotation which enables sub-class relationship
to the classes generated from the generic class. 
Here, the sub-class and super-class relationship follows the one 
that exists among the type used for generating specific class
from the generic class. 

For example, if a class A is a super-class of a class B,
then NonVariant[A] is also become a super-class of NonVariant[B].
It looks more flexible and reasonable at the first glance.

However, it cannot be compiled when the __Var__ is introduced in the 
generic class. It's because when the __Var__ is introduced, 
the compiler automatically addds getter and setter methods
in the generic class. 






-
